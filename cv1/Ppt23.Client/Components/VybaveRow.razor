<head>
    <meta charset="utf-8" />
</head>
@using Microsoft.AspNetCore.Components.Forms

@if (Item == null) return;
@{
    if (Item == null && IsInEditMode)
        ZapniEditMode();
}
@if (!IsInEditMode)
{
    <div>@Item.Name</div>
    <div>@Item.Price</div>
    <div>@Item.dateBuy.ToString("yyyy-MM-dd")</div>
    <div>@Item.lastRev.ToString("yyyy-MM-dd")</div>
    <div>@(
            (Item.IsRevNeeded) ? "Ano" : "Ne"
    )</div>

    <div>
        <button style="border-radius: 5px" @onclick="() => RevizeEventCallBack.InvokeAsync()">
            <i class="material-icons">done</i>
        </button>

        <button style="border-radius: 5px" @onclick="() => SmazEventCallback.InvokeAsync()">
            <i class="material-icons">delete</i>
        </button>

        <button style="border-radius: 5px" @onclick="() => ZapniEditMode()">
            <i class="material-icons">edit</i>
        </button>
    </div>
}
else if (Item != null) //je v editacnim modu
{
    <EditForm Model=editingItem OnValidSubmit="() => OnValidSubmit()">
       <DataAnnotationsValidator />
            <div>
                <div>
                    <InputText @bind-Value=@editingItem.Name />
                    <ValidationMessage For="() => editingItem.Name" /> 
                </div>

                <div>
                    <InputNumber @bind-Value=@editingItem.Price />
                    <ValidationMessage For="() => editingItem.Price" /> 
                <div/>

                <div>
                    <InputDate @bind-Value=@editingItem.dateBuy />
                </div>

                <div>
                    <InputDate @bind-Value=@editingItem.lastRev />
                </div>

                <div>@((editingItem.IsRevNeeded) ? "Ano" : "Ne")</div>
                <div>
                    <button style="border-radius: 5px">
                    <i class="material-icons">done</i>
                </button>
                    <button style="border-radius: 5px" @onclick="() => IsInEditMode = false">
                    <i class="material-icons">close</i>
                </button>
                </div>
                @if (ChildContent == null)
                {
                    <button type="submit" class="bg-amber-500 twbtn">
                        Ok
                    </button>
                    <button @onclick="() => IsInEditMode = false" class="bg-gray-500 twbtn">
                        zruš
                    </button>
                }
                else
                {
                    @ChildContent
                }
                </div>
            </div>
        </EditForm>
}
else
{
    <div>Smthing's wrong! ❌</div>
}
@code {
    [Parameter, EditorRequired]
    public VybaveniVm Vyb { get; set; } = null!;
    [Parameter] public EventCallback SmazEventCallback { get; set; }
    [Parameter] public EventCallback RevizeEventCallBack { get; set; }
    [Parameter] public EventCallback EditDoneCallback { get; set; }
    [Parameter] public RenderFragment? ChildContent { get; set; }
    [Parameter] public bool IsInEditMode { get; set; }
    VybaveniVm? editingItem;
    VybaveniVm? Item;

    private void OnValidSubmit()
    {
        ArgumentNullException.ThrowIfNull(Item);
        IsInEditMode = false;
        Vyb.Name = Vyb.Name;
        Vyb.Price = Vyb.Price;
        Vyb.dateBuy = Vyb.dateBuy;
        Vyb.lastRev = Vyb.lastRev;
        //EditDoneEventCallback.InvokeAsync();
    }

    void ZapniEditMode()
    {
        IsInEditMode = true;
        Item = new()
            {
                Name = Vyb.Name,
                Price = Vyb.Price,
                dateBuy = Vyb.dateBuy,
                lastRev = Vyb.lastRev
            };
    }

    

}