<head>
    <meta charset="utf-8" />
</head>
@using Microsoft.AspNetCore.Components.Forms

@if (Item == null) return;
@if (Item != null && !Item.isInEditMode)
{
    <div>@Item.Name</div>
    <div>@Item.Price</div>
    <div>@Item.dateBuy.ToString("yyyy-MM-dd")</div>
    <div>@Item.lastRev.ToString("yyyy-MM-dd")</div>
    <div>@(
            (Item.IsRevNeeded) ? "Ano" : "Ne"
    )</div>

    <div>
        <button style="border-radius: 5px" @onclick="() => RevizeEventCallBack.InvokeAsync()">
            <i class="material-icons">done</i>
        </button>

        <button style="border-radius: 5px" @onclick="() => SmazEventCallback.InvokeAsync()">
            <i class="material-icons">delete</i>
        </button>

        <button style="border-radius: 5px" @onclick="() => TurnOnEdit()">
            <i class="material-icons">edit</i>
        </button>
    </div>
}
else if (editingItem != null && editingItem.isInEditMode)
{
   <EditForm Model=editingItem OnValidSubmit="() => TurnOffEdit(true)">
       <DataAnnotationsValidator />
            <div>
                <div>
                    <div>
                    <InputText @bind-Value=@editingItem.Name />
                </div>
                <div>
                    <ValidationMessage For="() => editingItem.Name" />
                </div>
                </div>

                <div>
                    <div>
                    <InputNumber @bind-Value=@editingItem.Price />
                </div>
                <div>
                    <ValidationMessage For="() => editingItem.Price" />
                        </div>
                </div>

                <div>
                    <InputDate @bind-Value=@editingItem.dateBuy />
                </div>

                <div>
                    <InputDate @bind-Value=@editingItem.lastRev />
                </div>

                <div>@((editingItem.IsRevNeeded) ? "Ano" : "Ne")</div>
                <div>
                    <button style="border-radius: 5px">
                    <i class="material-icons">done</i>
                </button>
                <button style="border-radius: 5px" @onclick="() => TurnOffEdit(false)">
                      <i class="material-icons">close</i>
                </button>
                </div>
            </div>
        </EditForm>
}
@code {
    [Parameter] public EventCallback SmazEventCallback { get; set; }
    [Parameter] public EventCallback RevizeEventCallBack { get; set; }
    [Parameter] public EventCallback EditDoneCallback { get; set; }
    VybaveniVm? editingItem;
    VybaveniVm? _Item;
    [Parameter]
    public VybaveniVm? Item
    {
        get => _Item;
        set
        {
            _Item = value;
            if (value != null && value.isInEditMode)
                TurnOnEdit();
        }
    }

    private void TurnOnEdit()
    {
        if (Item != null)
        {
            Item.isInEditMode = true;
            editingItem = Item.Copy();
        }
    }

    private void TurnOffEdit(bool success)
    {
        if (success)
        {
            editingItem?.MapTo(Item);
        }
        if (Item is not null)
            Item.isInEditMode = false;
        editingItem = null;
        EditDoneCallback.InvokeAsync(success);
    }
}