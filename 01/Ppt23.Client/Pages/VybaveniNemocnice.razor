@page "/vybaveni"
@using Ppt23.Client.Components;
@inject HttpClient Http

@if (seznamVybaveni is null) {
    <div class="absolute right-1/2 bottom-1/2  transform translate-x-1/2 translate-y-1/2 ">
        <div class=" border-t-transparent border-solid animate-spin  rounded-full border-teal-600 border-8 h-16 w-16"></div>
    </div>
    return;
}

<head>
    <meta charset="utf-8" />
</head>

<body>
      <div style="width: 1000px; column-count: 5">
        <div>Název</div>
        <div>Cena</div>
        <div>Datum nákupu</div>
        <div>Datum poslední revize</div>
        <div>Potřebuje revizi</div>
      </div>
      <div>
        @foreach (VybaveniVm vyb in seznamVybaveni)
        {
            <div class="vybaveni-vm @((vyb.IsRevNeeded) ? "bg-red" : "")">
                <VybaveRow Vyb="vyb"
                    SmazEventCallback="() => SmazVybaveni(vyb)"
                       RevizeEventCallBack="() => UdelejRevizi(vyb)"
                    EditDoneEventCallback="() => EditVybaveni(vyb)">
                </VybaveRow>
            </div>
        }
        <div class="pocetVyb">Pocet vybaveni: @seznamVybaveni.Count</div>
        <button style="border-radius: 5px" @onclick="noveVybaveni">
            Generovat nové vybavení
        </button>
        <button style="border-radius: 5px" @onclick="()=> {newModel = new();IsInNewMode = true;}">
            Nový kus
        </button>
      </div>
      @if (IsInNewMode)
        {
        ArgumentNullException.ThrowIfNull(newModel);//zařídí tlačítko Nový kus

        <VybaveRow IsInEditMode=true Vyb="newModel" EditDoneEventCallback="() => CreateVybaveni(newModel)">
            <button type="submit">Přidej</button>
            <button type="button" @onclick="() => IsInNewMode = false">Zrušit</button>
        </VybaveRow>
        }
</body>

@code {
    List<VybaveniVm> seznamVybaveni = new List<VybaveniVm>();
    bool IsInNewMode;
    VybaveniVm? newModel;
    [Parameter] public RenderFragment? ChildContent { get; set; }

    public void noveVybaveni()
    {
        VybaveniVm.PridatJednoVybaveni(seznamVybaveni);
    }

    protected override async Task OnInitializedAsync() //GET
    {
        await Task.Delay(1000);
        seznamVybaveni = await Http.GetFromJsonAsync<List<VybaveniVm>>("vybaveni");
    }

    async Task SmazVybaveni(VybaveniVm vyb) //DELETE
    {
        var odpoved = await Http.DeleteAsync($"vybaveni/{vyb.Id}");
        if (odpoved.IsSuccessStatusCode)
            seznamVybaveni?.Remove(vyb);
    }

    async Task EditVybaveni(VybaveniVm vyb) //PUT
    {
        var odpoved = await Http.PutAsJsonAsync($"vybaveni/{vyb.Id}", vyb);
        if (odpoved.IsSuccessStatusCode)
        {
            Console.WriteLine("edit success");
        }
        else
        {
            Console.WriteLine("edit not success");
        }
    }

    async Task UdelejRevizi(VybaveniVm vyb) //PUT
    {
        vyb.lastRev = DateTime.Now;
        var odpoved = await Http.PutAsJsonAsync($"vybaveni/{vyb.Id}", vyb);
        if (odpoved.IsSuccessStatusCode)
        {
            Console.WriteLine("edit success");
        }
        else
        {
            Console.WriteLine("edit not success");
        }

    }

    private async Task CreateVybaveni(VybaveniVm vyb) //POST
    {
        HttpResponseMessage response = await Http.PostAsJsonAsync($"vybaveni", vyb);

        if (response.IsSuccessStatusCode)
        {
            seznamVybaveni.Insert(0, newModel);
            IsInNewMode = false;
            Console.WriteLine("create success");
        }
    }
}